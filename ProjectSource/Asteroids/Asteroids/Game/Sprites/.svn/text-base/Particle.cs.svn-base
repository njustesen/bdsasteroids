using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace Asteroids {
    /// <author>Niels Justesen, Christian Vestergaard</author>
    /// <summary>
    /// A small particle which in numbers form an explosion. It moves like a bullet, and has a 
    /// direction moving away from a specified point.
    /// </summary>
    class Particle : Movable{
        static int randomNumber = -10;
        static float range = 200;
        static int maxSpeed = 8;
        static int minSpeed = 1;
        float distanceTraveled = 0;

        /// <author>Niels Justesen</author>
        /// <summary>
        /// The constructor of a particle.
        /// </summary>
        /// <param name="position">The initial position of the particle.</param>
        /// <param name="texture">The texture of the particle. Note that the scale will be set to 0.03 times 
        /// the original size.</param>
        public Particle(Vector2 position, Texture2D texture) {
            Position = position;
            Texture = texture;
            Speed = RandomSpeed();
            Rotation += RandomRotation();
            Scale = new Vector2(0.03f,0.03f);
        }

        /// <author>Niels Justesen</author>
        /// <summary>
        /// Generates a random rotation for the particle. 
        /// The method for generating the random number is not only based on the current time, since this would 
        /// make the rotation the same for two particles created at the same time. To solve this problem it is 
        /// based on a psoudo-random number generated by the last random number generator. 
        /// </summary>
        /// <param name="level">The current level.</param>
        /// <returns>A number between the ateroids minumspeed and the levels maximum speed.</returns>
        private float RandomRotation() {
            Random random = new Random();
            if (randomNumber >= 0) {
                random = new Random(randomNumber);
            }
            randomNumber = random.Next(1000);
            return (float)random.Next(360);
        }

        /// <author>Niels Justesen</author>
        /// <summary>
        /// Generates a random speed for the particle. 
        /// The method for generating the random number is not only based on the current time, since this would 
        /// make the speed the same for two particles created at the same time. To solve this problem it is 
        /// based on a psoudo-random number generated by the last random number generator. 
        /// </summary>
        /// <param name="level">The current level.</param>
        /// <returns>A number between the ateroids minumspeed and the levels maximum speed.</returns>
        private float RandomSpeed() {
            Random random = new Random();
            if (randomNumber >= 0) {
                random = new Random(randomNumber);
            }
            randomNumber = random.Next(1000);
            return (float)minSpeed+random.Next(maxSpeed+minSpeed);
        }

        /// <author>Niels Justesen</author>
        /// <summary>
        /// Removes the particle when traveled a specific distance.
        /// </summary>
        public override void TakeAction(GameTime gameTime) {
            distanceTraveled += Speed;
            if (distanceTraveled > range) {
                World.SpritesToBeRemoved.Add(this);
            }
        }
    }
}
